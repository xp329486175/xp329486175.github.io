<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>杂技浅尝 on xpblog</title>
    <link>https://xp329486175.github.io/categories/%E6%9D%82%E6%8A%80%E6%B5%85%E5%B0%9D/</link>
    <description>Recent content in 杂技浅尝 on xpblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Wed, 20 Nov 2019 19:29:37 -0700</lastBuildDate>
    
	<atom:link href="https://xp329486175.github.io/categories/%E6%9D%82%E6%8A%80%E6%B5%85%E5%B0%9D/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>&#34;高大上&#34;的数据工程师</title>
      <link>https://xp329486175.github.io/blog/2019-11/%E9%AB%98%E5%A4%A7%E4%B8%8A%E7%9A%84%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%B8%88/</link>
      <pubDate>Wed, 20 Nov 2019 19:29:37 -0700</pubDate>
      
      <guid>https://xp329486175.github.io/blog/2019-11/%E9%AB%98%E5%A4%A7%E4%B8%8A%E7%9A%84%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%B8%88/</guid>
      <description>国外很多知名互联网公司现在都有 Data Scientist 的职位，翻译过来非常吓人，叫数据科学家，读着高端大气，看着能上天。 而且很多时候的甚至要求学历是计算机博士。 作为金字塔顶端之一的程序员职位，大家或多或少都有一些憧憬，今天也看到了一篇文章的介绍，这里也记录一下，偶尔回来瞻仰瞻仰。 如果想成为一个优秀的数据工程师，需要掌握统计学和线性代数的相关知识，必须有熟练的编程技巧和数据抽象的能力，还要能做数据的可视化。完成了数据平</description>
    </item>
    
    <item>
      <title>git三对象commit、tree、blob</title>
      <link>https://xp329486175.github.io/blog/2019-08/git%E4%B8%89%E5%AF%B9%E8%B1%A1committreeblob/</link>
      <pubDate>Fri, 02 Aug 2019 15:29:37 -0700</pubDate>
      
      <guid>https://xp329486175.github.io/blog/2019-08/git%E4%B8%89%E5%AF%B9%E8%B1%A1committreeblob/</guid>
      <description>git对象 Git 是一套内容寻址文件系统。从核心上来看不过是简单地存储键值对（key-value）。它允许插入任意类型的内容，并会返回一个键值，通过该键值可以在任何时候再取出该内容。 可以通过底层命令 hash-object 来示范这点，传一些数据给该命令，它会将数据保存在 .git 目录并返回表示这些数据的键值。 ➜ xp329486175.github.io git:(master) find .git/objects .git/objects/22 .git/objects/25 ➜ xp329486175.github.io git:(master) find .git/objects/25 -type f .git/objects/25/d9818432ffbdb20f482dbefc07b38634b9b748 .git/objects/25/1263c13a2ad0ffe6916dd8c9a28cb3e46b1442 .git/objects/25/1ee10240462a1ecf1cb7e4765a0554b4af154a .git/objects/25/5b178360d88dcb5cd9ed13b8a4ed666b632cb0 .git/objects/25/9c460600f35789e3c8df91a510f198b16e1129 .git/objects/25/25a02051c063f2ade525cda2eafc259f71e53c .git/objects/25/3a3e88518e606c1187e9b8a9cf8243c0c45280 .git/objects/25/d451b1f647ea9a5bbfed9bfd8edf3b237df0d0 git有四个常用的对象（或者称为组件）概念： tag commit tree blob 首先我们可以通过find .git/objects -type f</description>
    </item>
    
    <item>
      <title>git简析</title>
      <link>https://xp329486175.github.io/blog/2019-07/git%E7%AE%80%E6%9E%90/</link>
      <pubDate>Wed, 31 Jul 2019 20:18:48 +0800</pubDate>
      
      <guid>https://xp329486175.github.io/blog/2019-07/git%E7%AE%80%E6%9E%90/</guid>
      <description>git简单介绍 平时经常用到git，这里就做一个简单总结。首先盗个图： 几个专有名词的意思： Workspace：工作区 Index / Stage：暂存区 Repository：仓库区（或本地仓库） Remote：远程仓库 值得注意的几个命令 1、有时候git远端仓库有某个分支，而我在gitlab上merge时，却没有看到这个分支。此时我们需要用到fetch这个命令，将远端分支同步到本地仓库。 # 同步所有分支 git fetch #同步单个分</description>
    </item>
    
    <item>
      <title>程序员练级之路</title>
      <link>https://xp329486175.github.io/blog/2019-06/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%BB%83%E7%BA%A7%E4%B9%8B%E8%B7%AF/</link>
      <pubDate>Tue, 25 Jun 2019 23:00:48 +0800</pubDate>
      
      <guid>https://xp329486175.github.io/blog/2019-06/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%BB%83%E7%BA%A7%E4%B9%8B%E8%B7%AF/</guid>
      <description>序 从博客搭建到今天，正好是两周了，这是第15篇blog。今天放松下不写纯技术类博文了，聊聊程序员相关话题：级别和晋升。 在程序员的职业生涯之中，都会经历一个修炼成长、打怪升级的过程。虽然我工作时间比起那些十年二十年的资深大佬来说还太少， 但也毕业四年了。这里就根据看到的一些文章和自己这四年职业生涯，还是写点感想吧。当然每个人都有自己的看法，这只是我个人或者说是个人认同的观点。 级别要分为两个方面：个人能</description>
    </item>
    
    <item>
      <title>字符编码基础</title>
      <link>https://xp329486175.github.io/blog/2019-06/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 24 Jun 2019 21:36:48 +0800</pubDate>
      
      <guid>https://xp329486175.github.io/blog/2019-06/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E5%9F%BA%E7%A1%80/</guid>
      <description>字符编码 我们都知道，字符串是一种数据类型。但是字符串和其他数据类型相比，比较特殊都地方就是有编码问题。 因为计算机只能处理数字。如果要处理文本，就要先把其他类型的文本转换成数字才能处理。最早的时候计算机设计为8个比特（bit）作为一个字节（Byte）， 所以一个字节能表示的最大整数就是255（二进制11111111=十进制255）。 如果需要表示更大的整数，就需要更多的字节。如果两个字节可以表示的最大整</description>
    </item>
    
    <item>
      <title>OAuth2协议之几种典型的OAuth Flow</title>
      <link>https://xp329486175.github.io/blog/2019-06/oauth2%E5%8D%8F%E8%AE%AE%E4%B9%8B%E5%87%A0%E7%A7%8D%E5%85%B8%E5%9E%8B%E7%9A%84oauth-flow/</link>
      <pubDate>Sun, 16 Jun 2019 12:13:48 +0800</pubDate>
      
      <guid>https://xp329486175.github.io/blog/2019-06/oauth2%E5%8D%8F%E8%AE%AE%E4%B9%8B%E5%87%A0%E7%A7%8D%E5%85%B8%E5%9E%8B%E7%9A%84oauth-flow/</guid>
      <description>OAuth2运行流程 从上一篇文章我们知道了，OAuth2是什么，它的本质就是如何获取Token，如何使用Token。我们用一张图来总结一下OAuth2运行流程： A) 用户打开客户端以后，客户端要求用户给予授权。 B) 用户同意给予客户端授权。 C) 客户端使用上一步获得的授权，向认证服务器申请令牌。 D) 认证服务器对客户端进行认证以后，确认无误，同意发放令牌。 E) 客户端使用令牌，向资源服务器申请获取资源。 F) 资源服务器确</description>
    </item>
    
    <item>
      <title>OAuth2协议之白话OAuth2</title>
      <link>https://xp329486175.github.io/blog/2019-06/oauth2%E5%8D%8F%E8%AE%AE%E4%B9%8B%E7%99%BD%E8%AF%9Doauth2/</link>
      <pubDate>Sat, 15 Jun 2019 16:52:48 +0800</pubDate>
      
      <guid>https://xp329486175.github.io/blog/2019-06/oauth2%E5%8D%8F%E8%AE%AE%E4%B9%8B%E7%99%BD%E8%AF%9Doauth2/</guid>
      <description>OAuth2协议是什么？ OAuth2通常也叫OAuth2.0。在我们日常生活中，我们常常会用微信或者QQ等账号去注册或者登陆其他应用。比如：用微信玩王者荣耀等。 这类在应用程序上，通过第三方账号授权，提供有限的用户数据的行为。就是OAuth2协议的一种最常见的使用场景。 官方术语 OAuth2是开放授权的一个标准，旨在让用户允许第三方应用去访问改用户在某服务器中的特定私有资源， 而可以不提供其在某服务器的</description>
    </item>
    
  </channel>
</rss>